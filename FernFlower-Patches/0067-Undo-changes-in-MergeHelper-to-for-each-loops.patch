From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: moist-mason <67809772+moist-mason@users.noreply.github.com>
Date: Sat, 11 Mar 2023 18:45:10 -0600
Subject: [PATCH] Undo changes in MergeHelper to for-each loops


diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/MergeHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/MergeHelper.java
index 3025737508432bebbbd645908852f93d44dd384f..dcf934cae2e720505750694e61ca62f5be3e4dcf 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/MergeHelper.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/MergeHelper.java
@@ -18,16 +18,9 @@ package org.jetbrains.java.decompiler.modules.decompiler;
 import org.jetbrains.java.decompiler.code.cfg.BasicBlock;
 import org.jetbrains.java.decompiler.main.DecompilerContext;
 import org.jetbrains.java.decompiler.main.collectors.CounterContainer;
-import org.jetbrains.java.decompiler.modules.decompiler.exps.ArrayExprent;
-import org.jetbrains.java.decompiler.modules.decompiler.exps.AssignmentExprent;
-import org.jetbrains.java.decompiler.modules.decompiler.exps.ConstExprent;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.Exprent;
-import org.jetbrains.java.decompiler.modules.decompiler.exps.FunctionExprent;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.IfExprent;
-import org.jetbrains.java.decompiler.modules.decompiler.exps.InvocationExprent;
-import org.jetbrains.java.decompiler.modules.decompiler.exps.VarExprent;
 import org.jetbrains.java.decompiler.modules.decompiler.stats.*;
-import org.jetbrains.java.decompiler.util.ExprentUtil;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -68,20 +61,17 @@ public class MergeHelper {
 
         // identify a while loop
         if (matchWhile(stat)) {
-          if (!matchForEach(stat)) {
-            matchFor(stat);
-          }
+          // identify a for loop - subtype of while
+          matchFor(stat);
         }
         else {
           // identify a do{}while loop
-//          matchDoWhile(stat);
+          matchDoWhile(stat);
         }
 
         break;
       case DoStatement.LOOP_WHILE:
-        if (!matchForEach(stat)) {
-          matchFor(stat);
-        }
+        matchFor(stat);
     }
 
     return (stat.getLooptype() != oldloop);
@@ -102,9 +92,9 @@ public class MergeHelper {
         StatEdge elseedge = lastif.getAllSuccessorEdges().get(0);
 
         if ((ifedge.getType() == StatEdge.TYPE_BREAK && elseedge.getType() == StatEdge.TYPE_CONTINUE && elseedge.closure == stat
-             && isDirectPath(stat, ifedge.getDestination())) ||
-            (ifedge.getType() == StatEdge.TYPE_CONTINUE && elseedge.getType() == StatEdge.TYPE_BREAK && ifedge.closure == stat
-             && isDirectPath(stat, elseedge.getDestination()))) {
+                && isDirectPath(stat, ifedge.getDestination())) ||
+                (ifedge.getType() == StatEdge.TYPE_CONTINUE && elseedge.getType() == StatEdge.TYPE_BREAK && ifedge.closure == stat
+                        && isDirectPath(stat, elseedge.getDestination()))) {
 
           Set<Statement> set = stat.getNeighboursSet(StatEdge.TYPE_CONTINUE, Statement.DIRECTION_BACKWARD);
           set.remove(last);
@@ -120,10 +110,6 @@ public class MergeHelper {
           if (ifedge.getType() == StatEdge.TYPE_BREAK) {
             ifexpr.negateIf();
           }
-          if (stat.getConditionExprent() != null) {
-            ifexpr.getCondition().addBytecodeOffsets(stat.getConditionExprent().bytecode);
-          }
-          ifexpr.getCondition().addBytecodeOffsets(lastif.getHeadexprent().bytecode);
           stat.setConditionExprent(ifexpr.getCondition());
           lastif.getFirst().removeSuccessor(ifedge);
           lastif.removeSuccessor(elseedge);
@@ -181,10 +167,6 @@ public class MergeHelper {
               // negate condition (while header)
               IfExprent ifexpr = (IfExprent)firstif.getHeadexprent().copy();
               ifexpr.negateIf();
-              if (stat.getConditionExprent() != null) {
-                ifexpr.getCondition().addBytecodeOffsets(stat.getConditionExprent().bytecode);
-              }
-              ifexpr.getCondition().addBytecodeOffsets(firstif.getHeadexprent().bytecode);
               stat.setConditionExprent(ifexpr.getCondition());
 
               // remove edges
@@ -202,7 +184,7 @@ public class MergeHelper {
               // remove empty if statement as it is now part of the loop
               if (firstif == stat.getFirst()) {
                 BasicBlockStatement bstat = new BasicBlockStatement(new BasicBlock(
-                  DecompilerContext.getCounterContainer().getCounterAndIncrement(CounterContainer.STATEMENT_COUNTER)));
+                        DecompilerContext.getCounterContainer().getCounterAndIncrement(CounterContainer.STATEMENT_COUNTER)));
                 bstat.setExprents(new ArrayList<Exprent>());
                 stat.replaceStatement(firstif, bstat);
               }
@@ -223,12 +205,7 @@ public class MergeHelper {
               stat.setLooptype(DoStatement.LOOP_WHILE);
 
               // no need to negate the while condition
-              IfExprent ifexpr = (IfExprent)firstif.getHeadexprent().copy();
-              if (stat.getConditionExprent() != null) {
-                ifexpr.getCondition().addBytecodeOffsets(stat.getConditionExprent().bytecode);
-              }
-              ifexpr.getCondition().addBytecodeOffsets(firstif.getHeadexprent().bytecode);
-              stat.setConditionExprent(ifexpr.getCondition());
+              stat.setConditionExprent(((IfExprent)firstif.getHeadexprent().copy()).getCondition());
 
               // remove edges
               StatEdge ifedge = firstif.getIfEdge();
@@ -246,7 +223,7 @@ public class MergeHelper {
 
               if (firstif.getIfstat() == null) {
                 BasicBlockStatement bstat = new BasicBlockStatement(new BasicBlock(
-                  DecompilerContext.getCounterContainer().getCounterAndIncrement(CounterContainer.STATEMENT_COUNTER)));
+                        DecompilerContext.getCounterContainer().getCounterAndIncrement(CounterContainer.STATEMENT_COUNTER)));
                 bstat.setExprents(new ArrayList<Exprent>());
 
                 ifedge.setSource(bstat);
@@ -336,7 +313,7 @@ public class MergeHelper {
     }
 
     boolean haslast = issingle || (lastDoExprent.type == Exprent.EXPRENT_ASSIGNMENT ||
-                                   lastDoExprent.type == Exprent.EXPRENT_FUNCTION);
+            lastDoExprent.type == Exprent.EXPRENT_FUNCTION);
 
     if (!haslast) {
       return false;
@@ -358,8 +335,6 @@ public class MergeHelper {
         }
         else {
           preData = current.getNeighbours(StatEdge.TYPE_REGULAR, Statement.DIRECTION_BACKWARD).get(0);
-          // we're not a basic block, so we can't dive inside for exprents
-          if (preData.type != Statement.TYPE_BASICBLOCK) break;
           preData = getLastDirectData(preData);
           if (preData != null && !preData.getExprents().isEmpty()) {
             initDoExprent = preData.getExprents().get(preData.getExprents().size() - 1);
@@ -386,247 +361,27 @@ public class MergeHelper {
 
       stat.setLooptype(DoStatement.LOOP_FOR);
       if (hasinit) {
-        Exprent exp = preData.getExprents().remove(preData.getExprents().size() - 1);
-        if (stat.getInitExprent() != null) {
-          exp.addBytecodeOffsets(stat.getInitExprent().bytecode);
-        }
-        stat.setInitExprent(exp);
+        stat.setInitExprent(preData.getExprents().remove(preData.getExprents().size() - 1));
       }
-      Exprent exp = lastData.getExprents().remove(lastData.getExprents().size() - 1);
-      if (stat.getIncExprent() != null) {
-        exp.addBytecodeOffsets(stat.getIncExprent().bytecode);
-      }
-      stat.setIncExprent(exp);
+      stat.setIncExprent(lastData.getExprents().remove(lastData.getExprents().size() - 1));
     }
 
-    cleanEmptyStatements(stat, lastData);
-
-    return true;
-  }
-
-  private static boolean matchForEach(DoStatement stat) {
-    AssignmentExprent firstDoExprent = null;
-    AssignmentExprent[] initExprents = new AssignmentExprent[3];
-    Statement firstData = null, preData = null, lastData = null;
-    Exprent lastExprent = null;
-
-    // search for an initializing exprent
-    Statement current = stat;
-    while (true) {
-      Statement parent = current.getParent();
-      if (parent == null) {
-        break;
-      }
-
-      if (parent.type == Statement.TYPE_SEQUENCE) {
-        if (current == parent.getFirst()) {
-          current = parent;
-        }
-        else {
-          preData = current.getNeighbours(StatEdge.TYPE_REGULAR, Statement.DIRECTION_BACKWARD).get(0);
-          preData = getLastDirectData(preData);
-          if (preData != null && !preData.getExprents().isEmpty()) {
-            int size = preData.getExprents().size();
-            for (int x = 0; x < initExprents.length; x++) {
-              if (size > x) {
-                 Exprent exprent = preData.getExprents().get(size - 1 - x);
-                 if (exprent.type == Exprent.EXPRENT_ASSIGNMENT) {
-                   initExprents[x] = (AssignmentExprent)exprent;
-                 }
-              }
-            }
-          }
-          break;
-        }
-      }
-      else {
-        break;
-      }
-    }
-
-    firstData = getFirstDirectData(stat.getFirst());
-    if (firstData != null && firstData.getExprents().get(0).type == Exprent.EXPRENT_ASSIGNMENT) {
-      firstDoExprent = (AssignmentExprent)firstData.getExprents().get(0);
-    }
-    lastData = getLastDirectData(stat.getFirst());
-    if (lastData != null && !lastData.getExprents().isEmpty()) {
-      lastExprent = lastData.getExprents().get(lastData.getExprents().size() - 1);
-    }
-
-    if (stat.getLooptype() == DoStatement.LOOP_WHILE && initExprents[0] != null && firstDoExprent != null) {
-      if (initExprents[0].type == Exprent.EXPRENT_ASSIGNMENT &&
-          isIteratorCall(((AssignmentExprent)initExprents[0]).getRight())) {
-
-        if (!isHasNextCall(drillNots(stat.getConditionExprent())) ||
-            firstDoExprent.type != Exprent.EXPRENT_ASSIGNMENT) {
-          return false;
-        }
-
-        AssignmentExprent ass = (AssignmentExprent)firstDoExprent;
-        if (!isNextCall(ass.getRight()) || ass.getLeft().type != Exprent.EXPRENT_VAR) {
-          return false;
-        }
-
-        InvocationExprent next = (InvocationExprent)getUncast(ass.getRight());
-        InvocationExprent hnext = (InvocationExprent)getUncast(drillNots(stat.getConditionExprent()));
-        if (next.getInstance().type != Exprent.EXPRENT_VAR ||
-            hnext.getInstance().type != Exprent.EXPRENT_VAR ||
-            ExprentUtil.isVarReferenced((VarExprent)initExprents[0].getLeft(), stat, (VarExprent)next.getInstance(), (VarExprent)hnext.getInstance())) {
-          return false;
-        }
-
-        InvocationExprent holder = (InvocationExprent)((AssignmentExprent)initExprents[0]).getRight();
-
-        holder.getInstance().addBytecodeOffsets(initExprents[0].bytecode);
-        ass.getLeft().addBytecodeOffsets(firstDoExprent.bytecode);
-        if (stat.getIncExprent() != null) {
-          holder.getInstance().addBytecodeOffsets(stat.getIncExprent().bytecode);
-        }
-        if (stat.getInitExprent() != null) {
-          ass.getLeft().addBytecodeOffsets(stat.getInitExprent().bytecode);
-        }
-
-        stat.setLooptype(DoStatement.LOOP_FOREACH);
-        stat.setInitExprent(ass.getLeft());
-        stat.setIncExprent(holder.getInstance());
-        preData.getExprents().remove(initExprents[0]);
-        firstData.getExprents().remove(firstDoExprent);
-
-        if (initExprents[1] != null && initExprents[1].getLeft().type == Exprent.EXPRENT_VAR &&
-            holder.getInstance().type == Exprent.EXPRENT_VAR) {
-          VarExprent copy = (VarExprent)initExprents[1].getLeft();
-          VarExprent inc = (VarExprent)holder.getInstance();
-          if (copy.getIndex() == inc.getIndex() && copy.getVersion() == inc.getVersion() && !ExprentUtil.isVarReferenced(inc, stat.getTopParent(), copy)) {
-            preData.getExprents().remove(initExprents[1]);
-            initExprents[1].getRight().addBytecodeOffsets(initExprents[1].bytecode);
-            initExprents[1].getRight().addBytecodeOffsets(stat.getIncExprent().bytecode);
-            stat.setIncExprent(initExprents[1].getRight());
-          }
-        }
-        return true;
-      }
-      else if (initExprents[0] != null && initExprents[1] != null && firstDoExprent != null) {
-        if (firstDoExprent.getRight().type != Exprent.EXPRENT_ARRAY || firstDoExprent.getLeft().type != Exprent.EXPRENT_VAR) {
-          return false;
-        }
-
-        if (lastExprent == null || lastExprent.type != Exprent.EXPRENT_FUNCTION) {
-          return false;
-        }
-
-        if (initExprents[0].getRight().type != Exprent.EXPRENT_CONST ||
-            initExprents[1].getRight().type != Exprent.EXPRENT_FUNCTION ||
-            stat.getConditionExprent().type != Exprent.EXPRENT_FUNCTION) {
-          return false;
-        }
-
-        //FunctionExprent funcCond  = (FunctionExprent)drillNots(stat.getConditionExprent()); //TODO: Verify this is counter < copy.length
-        FunctionExprent funcRight = (FunctionExprent)initExprents[1].getRight();
-        FunctionExprent funcInc   = (FunctionExprent)lastExprent;
-        ArrayExprent    arr       = (ArrayExprent)firstDoExprent.getRight();
-        int incType = funcInc.getFuncType();
-
-        if (funcRight.getFuncType() != FunctionExprent.FUNCTION_ARRAY_LENGTH ||
-            (incType != FunctionExprent.FUNCTION_PPI && incType != FunctionExprent.FUNCTION_IPP) ||
-            arr.getIndex().type != Exprent.EXPRENT_VAR ||
-            arr.getArray().type != Exprent.EXPRENT_VAR) {
-            return false;
-        }
-
-        VarExprent index = (VarExprent)arr.getIndex();
-        VarExprent array = (VarExprent)arr.getArray();
-        VarExprent counter = (VarExprent)funcInc.getLstOperands().get(0);
-
-        if (counter.getIndex() != index.getIndex() ||
-            counter.getVersion() != index.getVersion()) {
-          return false;
-        }
-        if (ExprentUtil.isVarReferenced(counter, stat.getFirst(), index)) {
-          return false;
-        }
-
-        funcRight.getLstOperands().get(0).addBytecodeOffsets(initExprents[0].bytecode);
-        funcRight.getLstOperands().get(0).addBytecodeOffsets(initExprents[1].bytecode);
-        funcRight.getLstOperands().get(0).addBytecodeOffsets(lastExprent.bytecode);
-        firstDoExprent.getLeft().addBytecodeOffsets(firstDoExprent.bytecode);
-        firstDoExprent.getLeft().addBytecodeOffsets(initExprents[0].bytecode);
-
-        stat.setLooptype(DoStatement.LOOP_FOREACH);
-        stat.setInitExprent(firstDoExprent.getLeft());
-        stat.setIncExprent(funcRight.getLstOperands().get(0));
-        preData.getExprents().remove(initExprents[0]);
-        preData.getExprents().remove(initExprents[1]);
-        firstData.getExprents().remove(firstDoExprent);
-        lastData.getExprents().remove(lastExprent);
-
-        if (initExprents[2] != null && initExprents[2].getLeft().type == Exprent.EXPRENT_VAR) {
-          VarExprent copy = (VarExprent)initExprents[2].getLeft();
-          if (copy.getIndex() == array.getIndex() && copy.getVersion() == array.getVersion()) {
-            preData.getExprents().remove(initExprents[2]);
-            initExprents[2].getRight().addBytecodeOffsets(initExprents[2].bytecode);
-            initExprents[2].getRight().addBytecodeOffsets(stat.getIncExprent().bytecode);
-            stat.setIncExprent(initExprents[2].getRight());
-          }
-        }
-
-        return true;
+    if (lastData.getExprents().isEmpty()) {
+      List<StatEdge> lst = lastData.getAllSuccessorEdges();
+      if (!lst.isEmpty()) {
+        lastData.removeSuccessor(lst.get(0));
       }
+      removeLastEmptyStatement(stat, lastData);
     }
 
-    //cleanEmptyStatements(stat, firstData); //TODO: Look into this and see what it does...
-
-    return false;
-  }
-
-  private static boolean isType(Exprent exp, int type) { //This is just a helper macro, Wish java had real macros.
-    return exp != null && exp.type == type;
-  }
-  private static boolean isInvoke(Exprent exp, String cls, String method, String desc) {
-    exp = getUncast(exp);
-    if (!isType(exp,  Exprent.EXPRENT_INVOCATION)) {
-      return false;
-    }
-    InvocationExprent invoc = (InvocationExprent)exp;
-    if (cls != null && !cls.equals(invoc.getClassname())) {
-      return false;
-    }
-    return method.equals(invoc.getName()) && desc.equals(invoc.getStringDescriptor());
-  }
-  private static Exprent drillNots(Exprent exp) {
-    while (true) {
-      if (exp.type == Exprent.EXPRENT_FUNCTION) {
-        FunctionExprent fun = (FunctionExprent)exp;
-        if (fun.getFuncType() == FunctionExprent.FUNCTION_BOOL_NOT) {
-          exp = fun.getLstOperands().get(0);
-        }
-        else if (fun.getFuncType() == FunctionExprent.FUNCTION_EQ ||
-                 fun.getFuncType() == FunctionExprent.FUNCTION_NE) {
-          return fun.getLstOperands().get(0);
-        }
-        else {
-          return null;
-        }
-      }
-      else {
-        return null;
-      }
-    }
+    return true;
   }
 
-  private static void cleanEmptyStatements(DoStatement dostat, Statement stat) {
-    if (stat != null && stat.getExprents().isEmpty()) {
-      List<StatEdge> lst = stat.getAllSuccessorEdges();
-      if (!lst.isEmpty()) {
-        stat.removeSuccessor(lst.get(0));
-      }
-      removeLastEmptyStatement(dostat, stat);
-    }
-  }
   private static void removeLastEmptyStatement(DoStatement dostat, Statement stat) {
 
     if (stat == dostat.getFirst()) {
       BasicBlockStatement bstat = new BasicBlockStatement(new BasicBlock(
-        DecompilerContext.getCounterContainer().getCounterAndIncrement(CounterContainer.STATEMENT_COUNTER)));
+              DecompilerContext.getCounterContainer().getCounterAndIncrement(CounterContainer.STATEMENT_COUNTER)));
       bstat.setExprents(new ArrayList<Exprent>());
       dostat.replaceStatement(stat, bstat);
     }
@@ -652,52 +407,15 @@ public class MergeHelper {
       return stat;
     }
 
-    for (int i = stat.getStats().size() - 1; i >= 0; i--) {
-      Statement tmp = getLastDirectData(stat.getStats().get(i));
-      if (tmp == null || !tmp.getExprents().isEmpty()) {
-        return tmp;
-      }
-    }
-
-    return null;
-  }
-
-  private static Statement getFirstDirectData(Statement stat) {
-    if (stat.getExprents() != null && !stat.getExprents().isEmpty()) {
-      return stat;
-    }
-
-    for (Statement tmp : stat.getStats()) {
-      Statement ret = getFirstDirectData(tmp);
-      if (ret != null) {
-        return ret;
-      }
+    switch (stat.type) {
+      case Statement.TYPE_SEQUENCE:
+        for (int i = stat.getStats().size() - 1; i >= 0; i--) {
+          Statement tmp = getLastDirectData(stat.getStats().get(i));
+          if (tmp == null || !tmp.getExprents().isEmpty()) {
+            return tmp;
+          }
+        }
     }
     return null;
   }
-
-  private static Exprent getUncast(Exprent exp) {
-    if (exp.type == Exprent.EXPRENT_FUNCTION) {
-      FunctionExprent func = (FunctionExprent)exp;
-      if (func.getFuncType() == FunctionExprent.FUNCTION_CAST) {
-        return getUncast(func.getLstOperands().get(0));
-      }
-    }
-    return exp;
-  }
-
-  private static boolean isIteratorCall(Exprent exp) {
-    return isInvoke(exp, null, "iterator",     "()Ljava/util/Iterator;"    ) ||
-           isInvoke(exp, null, "listIterator", "()Ljava/util/ListIterator;");
-  }
-
-  private static boolean isHasNextCall(Exprent exp) {
-    return isInvoke(exp, "java/util/Iterator",     "hasNext", "()Z") ||
-           isInvoke(exp, "java/util/ListIterator", "hasNext", "()Z");
-  }
-
-  private static boolean isNextCall(Exprent exp) {
-    return isInvoke(exp, "java/util/Iterator",     "next", "()Ljava/lang/Object;") ||
-           isInvoke(exp, "java/util/ListIterator", "next", "()Ljava/lang/Object;");
-  }
 }
